CVE: CVE-2022-3624
CWE:
  - 401
ipc:
  note: Vulnerability had to do with failing to release a reference.
  answer: false
CVSS: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L
bugs: []
i18n:
  note: |
    This vulnerability has nothing to do with internationalization. It is a 
    memory leak within the application load balancer portion of the Linux kernel.
  answer: false
vccs: [d5410ac7b0baeca91cf73ff5241d35998ecc8c9e]
fixes: [4f5d33f4f798b1c6d92b613f0087f639d9836971]
vouch:
  note: |
    The GitHub commit message says it was signed off by Jay Vosburgh and Jakub
    Kicinski. The commit message also says it was reviewed by Nikolay Aleksandrov,
  answer: true
bounty:
  amt:
  url:
  announced:
lessons:
  yagni:
    note:
    applies:
  serial_killer:
    note:
    applies:
  complex_inputs:
    note:
    applies:
  distrust_input:
    note:
    applies:
  least_privilege:
    note:
    applies:
  native_wrappers:
    note:
    applies:
  defense_in_depth:
    note:
    applies:
  secure_by_default:
    note:
    applies:
  environment_variables:
    note:
    applies:
  security_by_obscurity:
    note:
    applies:
  frameworks_are_optional:
    note:
    applies:
reviews: []
sandbox:
  note: |
    This vulnerability did not leak to any violations related to 
    access or privilege
  answer: false
upvotes: 0
CWE_note: |
  CWE as registered in the NVD. If you are curating, check that this
  is correct and replace this comment with "Manually confirmed".
mistakes:
  answer: |
    There was a lapse where the developer forgot to release memory before returning
    null in the rlb_arp_xmit function they were modifying.
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    There can, and usually are, many mistakes behind a vulnerability.

    Remember that mistakes can come in many forms:
    * slip: failing to complete a properly planned step due to inattention
              e.g. wrong key in the ignition
              e.g. using < instead of <=
    * lapse: failing to complete a properly planned step due to memory failure
              e.g. forgetting to put car in reverse before backing up
              e.g. forgetting to check null
    * planning error: error that occurs when the plan is inadequate
              e.g. getting stuck in traffic because you didn't consider the
                   impact of the bridge closing
              e.g. calling the wrong method
              e.g. using a poor design

    These are grey areas, of course. But do your best to analyze the mistakes
    according to this framework.

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Write a thoughtful entry here that people in the software engineering
    industry would find interesting.
nickname:
subsystem: [net]
discovered:
  answer: |
    Jay Vosburgh posted in the Linux Kernel mailing list about the issue.
    This included a remedy to the issue as well.
  contest: nil
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked.
  automated: false
  developer: true
discussion:
  note: |
    There was little discussion about the issue on the Linux Kernel mailing list.
    One other developer was in agreement in response to the issue being raised.
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion.
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  any_discussion: true
  discussed_as_security: false
stacktrace:
  note: |
    There were no stack traces provided. Only the issue with references to the commit
  any_stacktraces: false
  stacktrace_with_fix: false
description: |
  This vulnerability involves a reference count memory leak. The code
  that introduced this commit had acquired a reference from another function,
  but failed to release it before exiting the function (rlb_arp_xmit) early.
  This vulnerability allowed a local user to crash the system.
unit_tested:
  fix: false
  code: false
  fix_answer: false
  code_answer: false
reported_date: 
specification:
  note: |
    There was no mention of a specification violation in any chats, commits
    or reports in resourcs like the CWE
  answer: false
announced_date: 2022-08-11
curation_level: 2
published_date: 2022-08-11
forgotten_check:
  note: |
    There was a check involved which introduced the vulnerability.
    However, the vulnerability was about failure to do something if 
    the check passed.
  answer: false
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix
    inserting an entire if-statement or a conditional to an existing
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
autodiscoverable:
  note: Yes
  answer: |
    It could be possible for some static analyzers to notice that there was an
    issue with reference counting. Valgrind could have possibly determined 
    issues with this by finding that a reference still existed which led to the
    vulnerability.
interesting_commits: []
order_of_operations:
  note:
  answer:
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
announced: 2022-08-10
CWE Identifier: "401"
